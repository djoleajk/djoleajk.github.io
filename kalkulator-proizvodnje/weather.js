// ============================================
// SISTEM ZA VREMENSKU PROGNOZU - VALJEVO
// Koristi Open-Meteo API (besplatan, bez kljuƒça)
// ============================================

class WeatherForecast {
    constructor() {
        this.latitude = 44.2744;  // Valjevo koordinate
        this.longitude = 19.8908;
        this.weatherData = null;
        this.lastUpdate = null;
    }

    /**
     * Fetch vremenska prognoza sa Open-Meteo API-ja
     */
    async fetchWeather() {
        try {
            const url = `https://api.open-meteo.com/v1/forecast?latitude=${this.latitude}&longitude=${this.longitude}&current=temperature_2m,relative_humidity_2m,apparent_temperature,weather_code,wind_speed_10m&hourly=temperature_2m,weather_code&daily=weather_code,temperature_2m_max,temperature_2m_min,precipitation_sum&timezone=Europe/Belgrade&forecast_days=3`;
            
            const response = await fetch(url);
            
            if (!response.ok) {
                throw new Error('Weather API nije dostupan');
            }
            
            this.weatherData = await response.json();
            this.lastUpdate = new Date();
            
            console.log('‚úì –í—Ä–µ–º–µ–Ω—Å–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –∞–∂—É—Ä–∏—Ä–∞–Ω–∞ –∑–∞ –í–∞—ô–µ–≤–æ');
            return this.weatherData;
        } catch (error) {
            console.warn('‚ö† –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø—Ä–µ—É–∑–∏–º–∞—ö—É –≤—Ä–µ–º–µ–Ω—Å–∫–µ –ø—Ä–æ–≥–Ω–æ–∑–µ:', error.message);
            return null;
        }
    }


    /**
     * Vraƒáa ikonu i opis na osnovu WMO koda
     */
    getWeatherInfo(code) {
        const weatherCodes = {
            0: { icon: '‚òÄÔ∏è', desc: '–í–µ–¥—Ä–æ', color: '#FFD700' },
            1: { icon: 'üå§Ô∏è', desc: '–ü—Ä–µ—Ç–µ–∂–Ω–æ –≤–µ–¥—Ä–æ', color: '#FDB813' },
            2: { icon: '‚õÖ', desc: '–î–µ–ª–∏–º–∏—á–Ω–æ –æ–±–ª–∞—á–Ω–æ', color: '#87CEEB' },
            3: { icon: '‚òÅÔ∏è', desc: '–û–±–ª–∞—á–Ω–æ', color: '#B0C4DE' },
            45: { icon: 'üå´Ô∏è', desc: '–ú–∞–≥–ª–∞', color: '#D3D3D3' },
            48: { icon: 'üå´Ô∏è', desc: '–ò—ö–µ', color: '#E0E0E0' },
            51: { icon: 'üå¶Ô∏è', desc: '–°–ª–∞–±–∞ –∫–∏—à–∞', color: '#4682B4' },
            53: { icon: 'üåßÔ∏è', desc: '–£–º–µ—Ä–µ–Ω–∞ –∫–∏—à–∞', color: '#4169E1' },
            55: { icon: 'üåßÔ∏è', desc: '–à–∞–∫–∞ –∫–∏—à–∞', color: '#0000CD' },
            61: { icon: 'üå¶Ô∏è', desc: '–°–ª–∞–±–∞ –∫–∏—à–∞', color: '#4682B4' },
            63: { icon: 'üåßÔ∏è', desc: '–£–º–µ—Ä–µ–Ω–∞ –∫–∏—à–∞', color: '#4169E1' },
            65: { icon: 'üåßÔ∏è', desc: '–à–∞–∫–∞ –∫–∏—à–∞', color: '#0000CD' },
            71: { icon: 'üå®Ô∏è', desc: '–°–ª–∞–± —Å–Ω–µ–≥', color: '#B0E0E6' },
            73: { icon: '‚ùÑÔ∏è', desc: '–£–º–µ—Ä–µ–Ω —Å–Ω–µ–≥', color: '#87CEEB' },
            75: { icon: '‚ùÑÔ∏è', desc: '–à–∞–∫ —Å–Ω–µ–≥', color: '#4682B4' },
            77: { icon: 'üå®Ô∏è', desc: '–°—É—Å–Ω–µ–∂–∏—Ü–∞', color: '#ADD8E6' },
            80: { icon: 'üå¶Ô∏è', desc: '–ü—ô—É—Å–∞–∫', color: '#4682B4' },
            81: { icon: '‚õàÔ∏è', desc: '–à–∞–∫ –ø—ô—É—Å–∞–∫', color: '#4169E1' },
            82: { icon: '‚õàÔ∏è', desc: '–à–∞–∫ –ø—ô—É—Å–∞–∫', color: '#0000CD' },
            85: { icon: 'üå®Ô∏è', desc: '–°–Ω–µ–∂–Ω–∏ –ø—ô—É—Å–∞–∫', color: '#87CEEB' },
            86: { icon: '‚ùÑÔ∏è', desc: '–à–∞–∫ —Å–Ω–µ–≥', color: '#4682B4' },
            95: { icon: '‚õàÔ∏è', desc: '–ì—Ä–º—ô–∞–≤–∏–Ω–∞', color: '#8B0000' },
            96: { icon: '‚õàÔ∏è', desc: '–ì—Ä–º—ô–∞–≤–∏–Ω–∞ —Å–∞ –≥—Ä–∞–¥–æ–º', color: '#8B0000' },
            99: { icon: '‚õàÔ∏è', desc: '–à–∞–∫–∞ –≥—Ä–º—ô–∞–≤–∏–Ω–∞', color: '#800000' }
        };

        return weatherCodes[code] || { icon: 'üå°Ô∏è', desc: '–ù–µ–ø–æ–∑–Ω–∞—Ç–æ', color: '#808080' };
    }

    /**
     * Prikazuje trenutnu vremensku prognozu
     */
    async displayCurrentWeather(containerId = 'weatherWidget') {
        const container = document.getElementById(containerId);
        
        if (!container) {
            console.error('Weather container nije pronaƒëen:', containerId);
            return;
        }

        // Prika≈æi loading
        container.innerHTML = '<div class="weather-loading">üì° –£—á–∏—Ç–∞–≤–∞–º –≤—Ä–µ–º–µ–Ω—Å–∫—É –ø—Ä–æ–≥–Ω–æ–∑—É...</div>';

        // Fetch podatke
        const data = await this.fetchWeather();
        
        if (!data || !data.current) {
            container.innerHTML = '<div class="weather-error">‚ö†Ô∏è –í—Ä–µ–º–µ–Ω—Å–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ —Ç—Ä–µ–Ω—É—Ç–Ω–æ –Ω–∏—ò–µ –¥–æ—Å—Ç—É–ø–Ω–∞</div>';
            return;
        }

        const current = data.current;
        const weatherInfo = this.getWeatherInfo(current.weather_code);
        const daily = data.daily;

        // Kreiraj prikaz
        container.innerHTML = `
            <div class="weather-card">
                <div class="weather-header">
                    <div class="weather-location">
                        üìç –í–∞—ô–µ–≤–æ
                    </div>
                    <div class="weather-time">
                        –ê–∂—É—Ä–∏—Ä–∞–Ω–æ: ${this.lastUpdate.toLocaleTimeString('sr-RS', { hour: '2-digit', minute: '2-digit' })}
                    </div>
                </div>
                
                <div class="weather-current">
                    <div class="weather-icon-large" style="color: ${weatherInfo.color}">
                        ${weatherInfo.icon}
                    </div>
                    <div class="weather-temp-main">
                        ${Math.round(current.temperature_2m)}¬∞C
                    </div>
                    <div class="weather-desc">
                        ${weatherInfo.desc}
                    </div>
                    <div class="weather-feels-like">
                        –û—Å–µ—õ–∞—ò: ${Math.round(current.apparent_temperature)}¬∞C
                    </div>
                </div>

                <div class="weather-details">
                    <div class="weather-detail-item">
                        <div class="weather-detail-icon">üíß</div>
                        <div class="weather-detail-label">–í–ª–∞–∂–Ω–æ—Å—Ç</div>
                        <div class="weather-detail-value">${current.relative_humidity_2m}%</div>
                    </div>
                    <div class="weather-detail-item">
                        <div class="weather-detail-icon">üí®</div>
                        <div class="weather-detail-label">–í–µ—Ç–∞—Ä</div>
                        <div class="weather-detail-value">${Math.round(current.wind_speed_10m)} km/h</div>
                    </div>
                </div>

                <div class="weather-forecast">
                    <div class="forecast-title">–ü—Ä–æ–≥–Ω–æ–∑–∞ –∑–∞ –Ω–∞—Ä–µ–¥–Ω–∞ 3 –¥–∞–Ω–∞:</div>
                    <div class="forecast-days">
                        ${this.generateForecastDays(daily)}
                    </div>
                </div>
            </div>
        `;

        // Automatsko osve≈æavanje svakih 30 minuta
        setTimeout(() => {
            this.displayCurrentWeather(containerId);
        }, 30 * 60 * 1000);
    }

    /**
     * Generi≈°e prikaz za narednih nekoliko dana
     */
    generateForecastDays(daily) {
        if (!daily || !daily.time) return '';

        const days = ['–ù–µ–¥–µ—ô–∞', '–ü–æ–Ω–µ–¥–µ—ô–∞–∫', '–£—Ç–æ—Ä–∞–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤—Ä—Ç–∞–∫', '–ü–µ—Ç–∞–∫', '–°—É–±–æ—Ç–∞'];
        let html = '';

        for (let i = 0; i < 3; i++) {
            const date = new Date(daily.time[i]);
            const dayName = i === 0 ? '–î–∞–Ω–∞—Å' : (i === 1 ? '–°—É—Ç—Ä–∞' : days[date.getDay()]);
            const weatherInfo = this.getWeatherInfo(daily.weather_code[i]);
            const maxTemp = Math.round(daily.temperature_2m_max[i]);
            const minTemp = Math.round(daily.temperature_2m_min[i]);
            const precipitation = daily.precipitation_sum[i];

            html += `
                <div class="forecast-day">
                    <div class="forecast-day-name">${dayName}</div>
                    <div class="forecast-day-icon" style="color: ${weatherInfo.color}">${weatherInfo.icon}</div>
                    <div class="forecast-day-temps">
                        <span class="temp-max">${maxTemp}¬∞</span>
                        <span class="temp-separator">/</span>
                        <span class="temp-min">${minTemp}¬∞</span>
                    </div>
                    ${precipitation > 0 ? `<div class="forecast-precipitation">üíß ${precipitation} mm</div>` : ''}
                </div>
            `;
        }

        return html;
    }
}

// Kreiramo globalnu instancu
const weatherForecast = new WeatherForecast();

// Automatski pokreni prikaz vremena kada se strana uƒçita
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
        if (document.getElementById('weatherWidget')) {
            weatherForecast.displayCurrentWeather();
        }
    });
} else {
    if (document.getElementById('weatherWidget')) {
        weatherForecast.displayCurrentWeather();
    }
}

